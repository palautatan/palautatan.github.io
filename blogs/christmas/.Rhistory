library(ggplot2)
library(tidyr)
library(reshape2)
library(forcats)
library(broom)
library(stringr)
christmas_music <- read_csv('christmas_billboard_data.csv')
set.seed(1225)
sample_df <- christmas_music %>%
select(song, performer, week_position, previous_week_position, weeks_on_chart) %>%
sample_n(5)
print(sample_df)
christmas_music %>%
summarize(`number of rows`=n(),
`number of columns`=ncol(christmas_music))
names(christmas_music)
christmas_music %>%
summarize(`first christmas`=min(year), `last christmas`=max(year))
christmas_music %>%
filter(performer %in% c('Mariah Carey', 'Kelly Clarkson'))
top_instances <- christmas_music %>%
mutate(date=as.Date(weekid, 'MM/DD/YYYY')) %>%
group_by(performer, song) %>%
slice_tail(n=1) %>%
select(song, performer, instance, peak_position, weeks_on_chart, previous_week_position, week_position) %>%
arrange(-instance) %>%
head(10)
top_instances %>%
ggplot(aes(x=song, y=instance)) +
geom_bar(stat='identity', aes(fill=song)) +
theme_classic() +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position='none') +
coord_flip() +
scale_fill_manual(values=rep(c('#838B83', '#659D32'), nrow(top_instances))) +
ylab('instances') +
ggtitle('Christmas Songs with Most Chart Instances')
top_weeks <- christmas_music %>%
mutate(date=as.Date(weekid, 'MM/DD/YYYY')) %>%
group_by(performer, song) %>%
slice_tail(n=1) %>%
select(song, performer, instance, peak_position, weeks_on_chart, previous_week_position, week_position) %>%
arrange(-weeks_on_chart) %>%
head(10)
top_weeks %>%
ggplot(aes(x=song, y=weeks_on_chart)) +
geom_bar(stat='identity', aes(fill=song)) +
theme_classic() +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position='none') +
coord_flip() +
scale_fill_manual(values=rep(c('#838B83', '#659D32'), nrow(top_instances))) +
ylab('weeks on chart') +
ggtitle('Christmas Songs With Longest Chart Streaks')
year_positions <- christmas_music %>%
mutate(date=as.Date(weekid, 'MM/DD/YYYY')) %>%
group_by(performer, song) %>%
slice_tail(n=1) %>%
select(performer, song, year, week_position) %>%
arrange(year, week_position) %>%
group_by(year) %>%
summarize(`mean chart position`=mean(week_position),
count=n())
year_positions %>%
ggplot(aes(x=year, y=count)) +
geom_bar(stat='identity', aes(fill=`mean chart position`), width=0.3) +
theme_classic() +
scale_fill_gradient(low='#F0F8FF', high='#B0E0E6') +
ylab('number of Christmas songs on chart') +
ggtitle('Billboard Christmas Songs Per Year')
artists_overall <- christmas_music %>%
group_by(performer) %>%
summarize(count=n(),
`first christmas`=min(year),
`last christmas`=max(year),
range=max(year)-min(year)) %>%
arrange(-count) %>%
mutate(performer=fct_reorder(performer, `first christmas`)) %>%
head(45)
all_years <- christmas_music %>%
pull(year)
artists_overall %>%
ggplot(aes(x=all_years)) +
geom_segment(aes(x=`first christmas`, xend=`last christmas`, y = performer, yend = performer, col=range)) +
scale_color_gradient(high='#F08080', low='#8C1717') +
theme_classic() +
theme(legend.position='none',
text = element_text(size=8)) +
xlab('year') +
ggtitle('Christmas Artists Over the Years')
christmas_music %>%
filter(month==12) %>%
filter(!is.na(previous_week_position)) %>%
ggplot(aes(x=previous_week_position, y=week_position)) +
geom_point(col='#CC4E5C', alpha=0.8) +
theme_classic() +
xlab('previous week position') +
ylab('week position') +
ggtitle('Scatterplot of Song Position and Previous Week Position')
means_sds <- christmas_music %>%
filter(month==12) %>%
filter(!is.na(previous_week_position)) %>%
select(previous_week_position, week_position) %>%
melt(id.vars=NULL) %>%
group_by(variable) %>%
summarize(mean=mean(value),
sd=sd(value))
set.seed(1225)
previous_week_norm <- rnorm(n=200, mean=means_sds$mean[1], sd=means_sds$sd[1])
week_norm <- rnorm(n=200, mean=means_sds$mean[2], sd=means_sds$sd[2])
data.frame(previous_week_norm, week_norm) %>%
ggplot(aes(x=previous_week_norm, y=week_norm)) +
geom_point(col='#CC4E5C', alpha=0.8) +
theme_classic() +
xlab('previous week position') +
ylab('week position') +
ggtitle('Scatterplot of BVN Song Position and Previous Week Position')
sum_stats <- christmas_music %>%
filter(month==12) %>%
select(previous_week_position, week_position) %>%
filter(!is.na(previous_week_position)) %>%
gather() %>%
group_by(key) %>%
summarize(mean=mean(value),
sd=sd(value))
sum_stats
slope_sd <- sum_stats$sd[2]/sum_stats$sd[1]
# Y = mX + b
# 53.67 = m63.95 + b
intercept_sd <- sum_stats$mean[1] - slope_sd*sum_stats$mean[2]
data.frame(Value=c(Slope=slope_sd, Intercept=intercept_sd))
data.frame(previous_week_norm, week_norm) %>%
ggplot(aes(x=previous_week_norm, y=week_norm)) +
geom_point(col='#CC4E5C', alpha=0.8) +
geom_abline(intercept=intercept_sd, slope=slope_sd, col='#838B83', lwd=5, alpha=0.1) +
theme_classic() +
xlab('previous week position') +
ylab('week position') +
ggtitle('SD Line on Simulated Data')
corr_coeff <- (data.frame(previous_week_norm, week_norm) %>% cor())[2,1]
slope_reg <- corr_coeff * slope_sd
intercept_reg <- sum_stats$mean[1] - slope_reg*sum_stats$mean[2]
data.frame(Value=c(Correlation=corr_coeff, Slope=slope_reg, Intercept=intercept_reg))
data.frame(previous_week_norm, week_norm) %>%
ggplot(aes(x=previous_week_norm, y=week_norm)) +
geom_point(col='#CC4E5C', alpha=0.8) +
geom_abline(intercept=intercept_reg, slope=slope_reg, col='#659D32', lwd=4, alpha=0.1) +
theme_classic() +
xlab('previous week position') +
ylab('week position') +
ggtitle('Regression Line on Simulated Data')
data.frame(previous_week_norm, week_norm) %>%
ggplot(aes(x=previous_week_norm, y=week_norm)) +
geom_point(col='#CC4E5C', alpha=0.8) +
geom_abline(intercept=intercept_sd, slope=slope_sd, col='#838B83', lwd=4, alpha=0.1) +
geom_abline(intercept=intercept_reg, slope=slope_reg, col='#659D32', lwd=4, alpha=0.1) +
theme_classic() +
xlab('previous week position') +
ylab('week position') +
ggtitle('Regression Line on Simulated Data')
christmas_music %>%
filter(month==12) %>%
filter(!is.na(previous_week_position)) %>%
ggplot(aes(x=previous_week_position, y=week_position)) +
geom_point(col='#CC4E5C', alpha=0.8) +
geom_abline(intercept=intercept_sd, slope=slope_sd, col='#838B83', lwd=4, alpha=0.1) +
geom_abline(intercept=intercept_reg, slope=slope_reg, col='#659D32', lwd=4, alpha=0.1) +
theme_classic() +
xlab('previous week position') +
ylab('week position') +
ggtitle('Regression Line on Simulated Data')
ols_model <- christmas_music %>%
filter(month==12) %>%
filter(!is.na(previous_week_position)) %>%
lm(formula=week_position ~ previous_week_position)
ols_model %>% tidy()
ols_model %>% glance()
christmas_music %>%
filter(month==12) %>%
filter(!is.na(previous_week_position)) %>%
ggplot(aes(x=previous_week_position, y=week_position)) +
geom_point(col='#CC4E5C', alpha=0.8) +
geom_abline(intercept=ols_model$coefficients[1], slope=ols_model$coefficients[2], col='#838B83', lwd=4, alpha=0.1) +
theme_classic() +
xlab('previous week position') +
ylab('week position') +
ggtitle('Regression Line on Simulated Data')
christmas_music %>%
ggplot(aes(x=peak_position, y=weeks_on_chart)) +
geom_point() +
labs(title='Top Christmas Songs Peak Position and Weeks on Chart') +
theme_classic()
attributes <- c('url', 'total_time', 'bake_time', 'temp', 'author', 'ingredients')
recipe_1 <- c('https://panlasangpinoy.com/rice-cake-bibingka-recipe/',
45,
15,
375,
'vanjo merano',
'1 cup rice flour
1/8 teaspoon salt
2 1/2 teaspoon baking powder
3 tablespoons butter
1 cup granulated sugar
1 cup coconut milk
1/4 cup fresh milk
1 piece salted duck egg sliced
1/2 cup grated cheese
3 pieces raw eggs
Pre-cut banana leaf')
recipe_2 <- c('https://www.foxyfolksy.com/bibingka-recipe/',
25,
10,
390,
'bebs',
'1 cup rice flour
1/4 cup all-purpose flour
1/2 cup sugar
3/4 cup fresh milk
1/4 cup water
2 teaspoons baking powder
1/4 teaspoon salt
4 tablespoons vegetable oil
1 egg
grated cheese
grated coconut
1 salted egg - cut into 8 to 12 thin slices
butter - melted at room temperature for brushing')
recipe_3 <- c('https://cooking.nytimes.com/recipes/1018391-bibingka-filipino-coconut-rice-cake',
40,
15,
350,
'nicole ponseca',
'2 cups rice flour
1/2 cup glutinous rice flour
1 tablespoon baking powder
1 teaspoon salt
3/4 cup granulated sugar
1/3 cup unsalted butter, melted
1.5 cups coconut milk
3 eggs, lightly beaten
1 banana leaf (optional)
1 salted duck egg, sliced (optional)
1 cup/80 grams grated queso de bola or Cheddar cheese
1/2 cup/52 grams grated coconut, for topping (optional)')
recipe_4 <- c('https://www.kawalingpinoy.com/bibingka/',
35,
22.5,
400,
'lalaine manalo',
'1 teaspoon instant dry yeast
1/4 cup warm water
1 cup sugar
2 cups rice flour
1/2 teaspoon salt
1 3/4 cups coconut milk
2 eggs, beaten
2 salted eggs, peeled and sliced lengthwise
2 ounces cream cheese, sliced thinly (you can substitute kesong puti or queso de bola)
margarine or butter, softened
Grated mature coconut
Sugar to taste')
recipe_5 <- c('https://www.hungryhuy.com/bibingka/',
40,
30,
400,
'huy vu',
'banana leaves enough to line your molds
28.35 g unsalted butter melted
164 g white granulated sugar
184 g coconut milk
60 g whole milk
170 g rice flour
5 g baking powder
1 g salt
1 salted duck egg sliced into quarters
unsweetened coconut shreds
cheddar cheese or Velveeta shredded')
recipe_6 <- c('https://www.manilaspoon.com/2019/07/bibingka-coconut-rice-cake.html',
35,
20.5,
375,
'manila spoon',
'8 (7-inch [17.5-cm]) banana leaves (optional, see Note), softened
2 cups (230 g) rice flour, firmly packed
2 tbsp (28 g) baking powder
1⁄2 tsp salt
4 eggs, room temperature
1 1⁄4 cups (250 g) sugar
1 (13.5-oz [400-ml]) can coconut milk
2 tbsp (28 g) unsalted butter, melted
1 tsp vanilla extract')
bibingka_recipes <- list(recipe_1, recipe_2, recipe_3, recipe_4, recipe_5, recipe_6)
for (ix in 1:length(bibingka_recipes)) {
names(bibingka_recipes[[ix]]) <- attributes
}
bibingka_df <- data.frame(Reduce(rbind, bibingka_recipes))
row.names(bibingka_df) <- 1:nrow(bibingka_df)
bibingka_df %>% select(-url)
flour_components <- vector(mode='list', length=6)
for (ix in 1:6) {
these_ingredients <- unlist(strsplit(bibingka_df$ingredients[ix], split='\n'))
these_ingredients <- sapply(these_ingredients, trimws)
flour_component   <- these_ingredients[grepl(x=these_ingredients, pattern='flour')]
flour_components[[ix]] <- flour_component
}
# CONVERT GRAMS TO CUPS
# ACCORDING TO https://www.annaolson.ca/baking-conversions
# RICE FLOUR 1 cup = 135 g
g_index <- which(abs(grepl(x=flour_components, pattern='[0-9] cup(s?)') - 1)==1)
gtocups <- flour_components[g_index]
flour_components[[g_index]] <- paste0(round(as.numeric(str_extract(gtocups, '[0-9]+'))/135, 4), ' cups rice flour')
rice_flour_amounts <- list()
for (ix in 1:6) {
these_vals <- str_extract(flour_components[[ix]], '[0-9]+(.[0-9]+)?')
if(any(grepl('/', these_vals))) {
these_vals[which(grepl('/', these_vals))] <- eval(parse(text=these_vals[which(grepl('/', these_vals))]))
}
rice_flour_amounts[[ix]] <- sum(as.numeric(these_vals))
}
bibingka_df$flour <- unlist(rice_flour_amounts)
bibingka_df[,c('flour')]
# https://www.google.com/search?q=how+many+g+of+sugar+is+1+cup&oq=how+many+g+of+sugar+is+1+cup&aqs=chrome..69i57.4438j0j1&sourceid=chrome&ie=UTF-8
this_pattern <- 'sugar'
this_conversion <- 201
ingredient_components <- vector(mode='list', length=6)
# ix <- 4
for (ix in 1:6) {
these_ingredients <- unlist(strsplit(bibingka_df$ingredients[ix], split='\n'))
these_ingredients <- sapply(these_ingredients, trimws)
components   <- these_ingredients[grepl(x=these_ingredients, pattern=this_pattern)]
components <- gsub(pattern='⁄', replacement='/', components)
# PARENTHESIS
if (any(grepl(pattern='\\(', x=components))) {
paren_ix <- which(grepl(pattern=' \\([0-9]+ [A-z]+\\)', x=components))
components[paren_ix] <- gsub(pattern=' \\([0-9]+ [A-z]+\\)', replacement='', x=components[paren_ix])
}
# CONVERSION
# Check that all contain ingredient measurements contain "cups".
if (!any(grepl(pattern='[0-9] cup(s?)', x=components))) {
if (grepl(pattern='[0-9]+ g(rams)?', x=components)) {
gram_index <- which(grepl(pattern='[0-9]+ g(rams)?', x=components))
converted_cups <- round(as.numeric(str_extract(components[gram_index], '[0-9]+'))/this_conversion, 4)
components[gram_index] <- converted_cups
}
}
# EXTRACT VALUE ONLY
# try_these <- c('1/2', '1', '1 1/2', '1.2')
whole_number <- str_extract(components, pattern='^[0-9]+(\\.[0-9]+)?( |$)') # Or decimal.
fraction     <- str_extract(components, pattern='[0-9]/[0-9]')
# There is a weird character here.
# EVALUATE FRACTIONS
if (!is.na(fraction)) {
fraction <- as.numeric(eval(parse(text=fraction)))
if (!is.na(whole_number)) {
value_only <- as.numeric(whole_number) + fraction
} else {
value_only <- fraction
}
} else {
value_only <- whole_number
}
ingredient_components[[ix]] <- trimws(value_only)
}
bibingka_df$sugar <- unlist(ingredient_components)
bibingka_df[,c('flour', 'sugar')]
# Via CHAOKOH nutrition facts
# 1/3 cup = 80 mL
# 1 cup = 240 mL/g
this_pattern <- 'milk'
this_conversion <- 240
ingredient_components <- vector(mode='list', length=6)
# ix <- 2
for (ix in 1:6) {
these_ingredients <- unlist(strsplit(bibingka_df$ingredients[ix], split='\n'))
these_ingredients <- sapply(these_ingredients, trimws)
components   <- these_ingredients[grepl(x=these_ingredients, pattern=this_pattern)]
components <- gsub(pattern='⁄', replacement='/', components)
# REMOVAL OF PARENTHESIS
if (any(grepl(pattern='\\(', x=components))) {
paren_ix <- which(grepl(pattern=' \\([0-9]+ [A-z]+\\)', x=components))
components[paren_ix] <- gsub(pattern=' \\([0-9]+ [A-z]+\\)', replacement='', x=components[paren_ix])
}
# CONVERSION
# Check that all contain ingredient measurements contain "cups".
if (!any(grepl(pattern='[0-9] cup(s?)', x=components))) {
if (any(grepl(pattern='[0-9]+ g(rams)?', x=components))) {
gram_index <- which(grepl(pattern='[0-9]+ g(rams)?', x=components))
converted_cups <- round(as.numeric(str_extract(components[gram_index], '[0-9]+'))/this_conversion, 4)
components[gram_index] <- converted_cups
}
}
# EXTRACT VALUE ONLY
# try_these <- c('1/2', '1', '1 1/2', '1.2')
whole_number <- str_extract(components, pattern='^[0-9]+(\\.[0-9]+)?( |$)') # Or decimal.
fraction     <- str_extract(components, pattern='[0-9]/[0-9]')
# REMOVE NA'S IN WHOLE NUMBER
if (length(whole_number)>0) {
if (any(is.na(whole_number))) {
whole_number <- whole_number[!is.na(whole_number)]
}
}
# REMOVE NA'S IN FRACTION
if (length(fraction)>0) {
if (any(is.na(fraction))) {
fraction     <- fraction[!is.na(fraction)]
}
}
# EVALUATE FRACTIONS
# If there exists a fraction,
if (length(fraction)>0) {
# Evaluate it.
fraction <- as.numeric(eval(parse(text=fraction)))
# If twas a mixed number,
if (length(whole_number)>0) {
# add the whole and fraction parts together.
value_only <- as.numeric(whole_number) + fraction
} else {
# Else, it's just the fraction that will be our value.
value_only <- fraction
}
# Otherwise if there are no fractions,
} else {
# Use the whole number only.
if (length(whole_number)>0) {
value_only <- whole_number
}
}
if (length(value_only)>1) {
value_only <- sum(as.numeric(value_only))
}
ingredient_components[[ix]] <- trimws(value_only)
}
bibingka_df$milk <- unlist(ingredient_components)
bibingka_df[,c('flour', 'sugar', 'milk')]
bibingka_df
# https://www.allrecipes.com/article/cup-to-gram-conversions/
possible_units <- c('tablespoon(s)?',
'tbsp',
'cup(s)?',
'g',
'gram(s)?')
ingredient <- bibingka_df$ingredients[5]
parse_ingredients <- function(ingredient, this_pattern, conversion) {
these_ingredients <- unlist(strsplit(ingredient, split='\n'))
these_ingredients <- sapply(these_ingredients, trimws)
components   <- these_ingredients[grepl(x=these_ingredients, pattern=this_pattern)]
components <- gsub(pattern='⁄', replacement='/', components)
if (!grepl('[0-9]', components)) {
return(0)
}
# REMOVAL OF PARENTHESIS
if (any(grepl(pattern='\\(', x=components))) {
paren_ix <- which(grepl(pattern=' \\([0-9]+ [A-z]+\\)', x=components))
components[paren_ix] <- gsub(pattern=' \\([0-9]+ [A-z]+\\)', replacement='', x=components[paren_ix])
}
# UNITS
find_units <- sapply(possible_units, function(k) grepl(pattern=k, x=components))
these_units <- possible_units[which(find_units)]
# CONVERSION
# Check that all contain ingredient measurements contain "cups".
if (!any(grepl(pattern='[0-9] cup(s?)', x=components))) {
if (any(grepl(pattern='[0-9]+ g(rams)?', x=components))) {
gram_index <- which(grepl(pattern='[0-9]+ g(rams)?', x=components))
converted_cups <- round(as.numeric(str_extract(components[gram_index], '[0-9]+'))/this_conversion, 4)
components[gram_index] <- converted_cups
}
}
# EXTRACT VALUE ONLY
whole_number <- str_extract(components, pattern='^[0-9]+(\\.[0-9]+)?( |$)') # Or decimal.
fraction     <- str_extract(components, pattern='[0-9]/[0-9]')
# REMOVE NA'S IN WHOLE NUMBER
if (length(whole_number)>0) {
if (any(is.na(whole_number))) {
whole_number <- whole_number[!is.na(whole_number)]
}
}
# REMOVE NA'S IN FRACTION
if (length(fraction)>0) {
if (any(is.na(fraction))) {
fraction     <- fraction[!is.na(fraction)]
}
}
# EVALUATE FRACTIONS
# If there exists a fraction,
if (length(fraction)>0) {
# Evaluate it.
fraction <- as.numeric(eval(parse(text=fraction)))
# If twas a mixed number,
if (length(whole_number)>0) {
# add the whole and fraction parts together.
value_only <- as.numeric(whole_number) + fraction
} else {
# Else, it's just the fraction that will be our value.
value_only <- fraction
}
# Otherwise if there are no fractions,
} else {
# Use the whole number only.
if (length(whole_number)>0) {
value_only <- whole_number
}
}
if (length(value_only)>1) {
value_only <- sum(as.numeric(value_only))
}
return(list(components, these_units, trimws(value_only)))
}
this_pattern <- 'butter|oil'
this_conversion <- 227
ingredient_components <- vector(mode='list', length=6)
rawr <- lapply(1:6, function(k) parse_ingredients(ingredient=bibingka_df$ingredients[k], this_pattern='butter|oil', conversion=227))
bibingka_df$butter <- unlist(ingredient_components)
